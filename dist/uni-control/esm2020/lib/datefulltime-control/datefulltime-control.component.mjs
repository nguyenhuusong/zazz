import { Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "primeng/calendar";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
export class DatefulltimeControlComponent {
    constructor() {
        this.submit = false;
        this.callbackDatefulltime = new EventEmitter();
        this.classInput = false;
    }
    ngOnInit() {
    }
    onChangeValue(value, field_name, element) {
        this.modelFields[field_name].error = this.modelFields[field_name].isRequire && !this.element.columnValue ? true : false;
        this.modelFields[field_name].message = this.modelFields[field_name].error ? 'Trường bắt buộc nhập !' : '';
        this.callbackDatefulltime.emit({
            event: element,
            value: value,
            field: field_name
        });
    }
    inputFocus(event) {
        if (!this.element.columnValue) {
            this.classInput = true;
        }
    }
    inputFocusOut(event) {
        if (this.element.columnValue) {
            this.classInput = true;
        }
        else {
            this.classInput = false;
        }
    }
}
DatefulltimeControlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: DatefulltimeControlComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DatefulltimeControlComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.0", type: DatefulltimeControlComponent, selector: "lib-datefulltime-control", inputs: { element: "element", modelFields: "modelFields", dataView: "dataView", detail: "detail", submit: "submit" }, outputs: { callbackDatefulltime: "callbackDatefulltime" }, ngImport: i0, template: "<div class=\"group-date\" [ngClass]=\" element.columnValue ? 'valid' : 'invalid' \">\n    <label class=\"text-nowrap label-text\">{{element.columnLabel}} <span style=\"color:red\"\n            *ngIf=\"element.isRequire\">*</span></label>\n    <div>\n        <p-calendar placeholder=\"DD/MM/YYYY hh:mm\" [appendTo]=\"'body'\" [baseZIndex]=\"101\" [disabled]=\"element.isDisable\"\n            (onSelect)=\"onChangeValue($event, element.field_name, element)\" [(ngModel)]=\"element.columnValue\"\n            [monthNavigator]=\"true\" [showTime]=\"true\" hourFormat=\"24\" [yearNavigator]=\"true\" yearRange=\"2000:2030\"\n            inputId=\"navigators\" [required]=\"element.isRequire && element.isVisiable && !element.isEmpty\"\n            dateFormat=\"dd/mm/yy\" name={{element.field_name}}></p-calendar>\n\n        <div *ngIf=\"modelFields[element.field_name]?.isRequire && submit && modelFields[element.field_name]?.error\"\n            class=\"alert-validation alert-danger\">\n            <div [hidden]=\"!modelFields[element.field_name]?.error\">\n                {{modelFields[element.field_name]?.message}}\n            </div>\n        </div>\n    </div>\n</div>", styles: [""], components: [{ type: i1.Calendar, selector: "p-calendar", inputs: ["style", "styleClass", "inputStyle", "inputId", "name", "inputStyleClass", "placeholder", "ariaLabelledBy", "iconAriaLabel", "disabled", "dateFormat", "multipleSeparator", "rangeSeparator", "inline", "showOtherMonths", "selectOtherMonths", "showIcon", "icon", "appendTo", "readonlyInput", "shortYearCutoff", "monthNavigator", "yearNavigator", "hourFormat", "timeOnly", "stepHour", "stepMinute", "stepSecond", "showSeconds", "required", "showOnFocus", "showWeek", "dataType", "selectionMode", "maxDateCount", "showButtonBar", "todayButtonStyleClass", "clearButtonStyleClass", "autoZIndex", "baseZIndex", "panelStyleClass", "panelStyle", "keepInvalid", "hideOnDateTimeSelect", "numberOfMonths", "view", "touchUI", "timeSeparator", "focusTrap", "firstDayOfWeek", "showTransitionOptions", "hideTransitionOptions", "tabindex", "defaultDate", "minDate", "maxDate", "disabledDates", "disabledDays", "yearRange", "showTime", "locale"], outputs: ["onFocus", "onBlur", "onClose", "onSelect", "onInput", "onTodayClick", "onClearClick", "onMonthChange", "onYearChange", "onClickOutside", "onShow"] }], directives: [{ type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: DatefulltimeControlComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-datefulltime-control', template: "<div class=\"group-date\" [ngClass]=\" element.columnValue ? 'valid' : 'invalid' \">\n    <label class=\"text-nowrap label-text\">{{element.columnLabel}} <span style=\"color:red\"\n            *ngIf=\"element.isRequire\">*</span></label>\n    <div>\n        <p-calendar placeholder=\"DD/MM/YYYY hh:mm\" [appendTo]=\"'body'\" [baseZIndex]=\"101\" [disabled]=\"element.isDisable\"\n            (onSelect)=\"onChangeValue($event, element.field_name, element)\" [(ngModel)]=\"element.columnValue\"\n            [monthNavigator]=\"true\" [showTime]=\"true\" hourFormat=\"24\" [yearNavigator]=\"true\" yearRange=\"2000:2030\"\n            inputId=\"navigators\" [required]=\"element.isRequire && element.isVisiable && !element.isEmpty\"\n            dateFormat=\"dd/mm/yy\" name={{element.field_name}}></p-calendar>\n\n        <div *ngIf=\"modelFields[element.field_name]?.isRequire && submit && modelFields[element.field_name]?.error\"\n            class=\"alert-validation alert-danger\">\n            <div [hidden]=\"!modelFields[element.field_name]?.error\">\n                {{modelFields[element.field_name]?.message}}\n            </div>\n        </div>\n    </div>\n</div>", styles: [""] }]
        }], ctorParameters: function () { return []; }, propDecorators: { element: [{
                type: Input
            }], modelFields: [{
                type: Input
            }], dataView: [{
                type: Input
            }], detail: [{
                type: Input
            }], submit: [{
                type: Input
            }], callbackDatefulltime: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZWZ1bGx0aW1lLWNvbnRyb2wuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdW5pLWNvbnRyb2wvc3JjL2xpYi9kYXRlZnVsbHRpbWUtY29udHJvbC9kYXRlZnVsbHRpbWUtY29udHJvbC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91bmktY29udHJvbC9zcmMvbGliL2RhdGVmdWxsdGltZS1jb250cm9sL2RhdGVmdWxsdGltZS1jb250cm9sLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7O0FBTS9FLE1BQU0sT0FBTyw0QkFBNEI7SUFPdkM7UUFGUyxXQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ2QseUJBQW9CLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUV6RCxlQUFVLEdBQUcsS0FBSyxDQUFDO0lBREgsQ0FBQztJQUVqQixRQUFRO0lBQ1IsQ0FBQztJQUVELGFBQWEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU87UUFDdEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxTQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDeEgsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7UUFDekcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQztZQUM3QixLQUFLLEVBQUUsT0FBTztZQUNkLEtBQUssRUFBRSxLQUFLO1lBQ1osS0FBSyxFQUFFLFVBQVU7U0FDbEIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUFLO1FBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFO1lBQzdCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQztJQUVELGFBQWEsQ0FBQyxLQUFLO1FBQ2pCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUU7WUFDNUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7U0FDeEI7YUFBTTtZQUNMLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQzs7eUhBbENVLDRCQUE0Qjs2R0FBNUIsNEJBQTRCLGlQQ1B6Qyx3cENBaUJNOzJGRFZPLDRCQUE0QjtrQkFMeEMsU0FBUzsrQkFDRSwwQkFBMEI7MEVBSzNCLE9BQU87c0JBQWYsS0FBSztnQkFDRyxXQUFXO3NCQUFuQixLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csTUFBTTtzQkFBZCxLQUFLO2dCQUNHLE1BQU07c0JBQWQsS0FBSztnQkFDSSxvQkFBb0I7c0JBQTdCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2xpYi1kYXRlZnVsbHRpbWUtY29udHJvbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9kYXRlZnVsbHRpbWUtY29udHJvbC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2RhdGVmdWxsdGltZS1jb250cm9sLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBEYXRlZnVsbHRpbWVDb250cm9sQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgZWxlbWVudDtcbiAgQElucHV0KCkgbW9kZWxGaWVsZHM7XG4gIEBJbnB1dCgpIGRhdGFWaWV3O1xuICBASW5wdXQoKSBkZXRhaWw7XG4gIEBJbnB1dCgpIHN1Ym1pdCA9IGZhbHNlO1xuICBAT3V0cHV0KCkgY2FsbGJhY2tEYXRlZnVsbHRpbWUgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgY29uc3RydWN0b3IoKSB7IH1cbiAgY2xhc3NJbnB1dCA9IGZhbHNlO1xuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgfVxuXG4gIG9uQ2hhbmdlVmFsdWUodmFsdWUsIGZpZWxkX25hbWUsIGVsZW1lbnQpIHtcbiAgICB0aGlzLm1vZGVsRmllbGRzW2ZpZWxkX25hbWVdLmVycm9yID0gdGhpcy5tb2RlbEZpZWxkc1tmaWVsZF9uYW1lXS5pc1JlcXVpcmUgJiYgIXRoaXMuZWxlbWVudC5jb2x1bW5WYWx1ZSA/IHRydWUgOiBmYWxzZTtcbiAgICB0aGlzLm1vZGVsRmllbGRzW2ZpZWxkX25hbWVdLm1lc3NhZ2UgPSB0aGlzLm1vZGVsRmllbGRzW2ZpZWxkX25hbWVdLmVycm9yID8gJ1RyxrDhu51uZyBi4bqvdCBideG7mWMgbmjhuq1wICEnIDogJydcbiAgICB0aGlzLmNhbGxiYWNrRGF0ZWZ1bGx0aW1lLmVtaXQoe1xuICAgICAgZXZlbnQ6IGVsZW1lbnQsXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBmaWVsZDogZmllbGRfbmFtZVxuICAgIH0pXG4gIH1cblxuICBpbnB1dEZvY3VzKGV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLmVsZW1lbnQuY29sdW1uVmFsdWUpIHtcbiAgICAgIHRoaXMuY2xhc3NJbnB1dCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaW5wdXRGb2N1c091dChldmVudCkge1xuICAgIGlmICh0aGlzLmVsZW1lbnQuY29sdW1uVmFsdWUpIHtcbiAgICAgIHRoaXMuY2xhc3NJbnB1dCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2xhc3NJbnB1dCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG59XG4iLCI8ZGl2IGNsYXNzPVwiZ3JvdXAtZGF0ZVwiIFtuZ0NsYXNzXT1cIiBlbGVtZW50LmNvbHVtblZhbHVlID8gJ3ZhbGlkJyA6ICdpbnZhbGlkJyBcIj5cbiAgICA8bGFiZWwgY2xhc3M9XCJ0ZXh0LW5vd3JhcCBsYWJlbC10ZXh0XCI+e3tlbGVtZW50LmNvbHVtbkxhYmVsfX0gPHNwYW4gc3R5bGU9XCJjb2xvcjpyZWRcIlxuICAgICAgICAgICAgKm5nSWY9XCJlbGVtZW50LmlzUmVxdWlyZVwiPio8L3NwYW4+PC9sYWJlbD5cbiAgICA8ZGl2PlxuICAgICAgICA8cC1jYWxlbmRhciBwbGFjZWhvbGRlcj1cIkREL01NL1lZWVkgaGg6bW1cIiBbYXBwZW5kVG9dPVwiJ2JvZHknXCIgW2Jhc2VaSW5kZXhdPVwiMTAxXCIgW2Rpc2FibGVkXT1cImVsZW1lbnQuaXNEaXNhYmxlXCJcbiAgICAgICAgICAgIChvblNlbGVjdCk9XCJvbkNoYW5nZVZhbHVlKCRldmVudCwgZWxlbWVudC5maWVsZF9uYW1lLCBlbGVtZW50KVwiIFsobmdNb2RlbCldPVwiZWxlbWVudC5jb2x1bW5WYWx1ZVwiXG4gICAgICAgICAgICBbbW9udGhOYXZpZ2F0b3JdPVwidHJ1ZVwiIFtzaG93VGltZV09XCJ0cnVlXCIgaG91ckZvcm1hdD1cIjI0XCIgW3llYXJOYXZpZ2F0b3JdPVwidHJ1ZVwiIHllYXJSYW5nZT1cIjIwMDA6MjAzMFwiXG4gICAgICAgICAgICBpbnB1dElkPVwibmF2aWdhdG9yc1wiIFtyZXF1aXJlZF09XCJlbGVtZW50LmlzUmVxdWlyZSAmJiBlbGVtZW50LmlzVmlzaWFibGUgJiYgIWVsZW1lbnQuaXNFbXB0eVwiXG4gICAgICAgICAgICBkYXRlRm9ybWF0PVwiZGQvbW0veXlcIiBuYW1lPXt7ZWxlbWVudC5maWVsZF9uYW1lfX0+PC9wLWNhbGVuZGFyPlxuXG4gICAgICAgIDxkaXYgKm5nSWY9XCJtb2RlbEZpZWxkc1tlbGVtZW50LmZpZWxkX25hbWVdPy5pc1JlcXVpcmUgJiYgc3VibWl0ICYmIG1vZGVsRmllbGRzW2VsZW1lbnQuZmllbGRfbmFtZV0/LmVycm9yXCJcbiAgICAgICAgICAgIGNsYXNzPVwiYWxlcnQtdmFsaWRhdGlvbiBhbGVydC1kYW5nZXJcIj5cbiAgICAgICAgICAgIDxkaXYgW2hpZGRlbl09XCIhbW9kZWxGaWVsZHNbZWxlbWVudC5maWVsZF9uYW1lXT8uZXJyb3JcIj5cbiAgICAgICAgICAgICAgICB7e21vZGVsRmllbGRzW2VsZW1lbnQuZmllbGRfbmFtZV0/Lm1lc3NhZ2V9fVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC9kaXY+Il19