import { Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "primeng/calendar";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
export class DatetimesControlComponent {
    constructor() {
        this.submit = false;
        this.callbackDatetimes = new EventEmitter();
        this.classInput = false;
    }
    ngOnInit() {
    }
    onChangeValue(value, field_name, element) {
        this.modelFields[field_name].error = this.modelFields[field_name].isRequire && !this.element.columnValue ? true : false;
        this.modelFields[field_name].message = this.modelFields[field_name].error ? 'Trường bắt buộc nhập !' : '';
        this.callbackDatetimes.emit({
            event: element,
            value: value,
            field: field_name
        });
    }
    inputFocus(event) {
        if (!this.element.columnValue) {
            this.classInput = true;
        }
    }
    inputFocusOut(event) {
        if (this.element.columnValue) {
            this.classInput = true;
        }
        else {
            this.classInput = false;
        }
    }
}
DatetimesControlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: DatetimesControlComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DatetimesControlComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.0", type: DatetimesControlComponent, selector: "lib-datetimes-control", inputs: { element: "element", modelFields: "modelFields", dataView: "dataView", detail: "detail", submit: "submit" }, outputs: { callbackDatetimes: "callbackDatetimes" }, ngImport: i0, template: "<div class=\"group-dates\" [ngClass]=\" element.columnValue ? 'valid' : 'invalid' \">\n    <label class=\"text-nowrap label-text\">{{element.columnLabel}} <span style=\"color:red\"\n            *ngIf=\"element.isRequire\">*</span></label>\n\n    <p-calendar panelStyleClass=\"datepicker-default\" placeholder=\"DD/MM/YYYY\" [appendTo]=\"'body'\" [baseZIndex]=\"101\"\n        [disabled]=\"element.isDisable\" inputId=\"multiple\" [(ngModel)]=\"element.columnValue\" selectionMode=\"multiple\"\n        [readonlyInput]=\"true\" [monthNavigator]=\"true\" [yearNavigator]=\"true\"\n        (onBlur)=\"onChangeValue($event, element.field_name, element)\"\n        (onClose)=\"onChangeValue($event, element.field_name, element)\"\n        (onSelect)=\"onChangeValue($event, element.field_name, element)\" yearRange=\"1900:2025\"\n        [required]=\"element.isRequire && element.isVisiable && !element.isEmpty\" dateFormat=\"dd/mm/yy\"\n        name={{element.field_name}}></p-calendar>\n    <div class=\"list-date\">\n        <div *ngFor=\"let item of element.columnValue\">\n            <span>{{item | date: 'dd/MM/yyyy'}}</span>\n        </div>\n    </div>\n\n    <div *ngIf=\"modelFields[element.field_name]?.isRequire && submit && modelFields[element.field_name]?.error\"\n        class=\"alert-validation alert-danger\">\n        <div [hidden]=\"!modelFields[element.field_name]?.error\">\n            {{modelFields[element.field_name]?.message}}\n        </div>\n    </div>\n</div>", styles: [""], components: [{ type: i1.Calendar, selector: "p-calendar", inputs: ["style", "styleClass", "inputStyle", "inputId", "name", "inputStyleClass", "placeholder", "ariaLabelledBy", "iconAriaLabel", "disabled", "dateFormat", "multipleSeparator", "rangeSeparator", "inline", "showOtherMonths", "selectOtherMonths", "showIcon", "icon", "appendTo", "readonlyInput", "shortYearCutoff", "monthNavigator", "yearNavigator", "hourFormat", "timeOnly", "stepHour", "stepMinute", "stepSecond", "showSeconds", "required", "showOnFocus", "showWeek", "dataType", "selectionMode", "maxDateCount", "showButtonBar", "todayButtonStyleClass", "clearButtonStyleClass", "autoZIndex", "baseZIndex", "panelStyleClass", "panelStyle", "keepInvalid", "hideOnDateTimeSelect", "numberOfMonths", "view", "touchUI", "timeSeparator", "focusTrap", "firstDayOfWeek", "showTransitionOptions", "hideTransitionOptions", "tabindex", "defaultDate", "minDate", "maxDate", "disabledDates", "disabledDays", "yearRange", "showTime", "locale"], outputs: ["onFocus", "onBlur", "onClose", "onSelect", "onInput", "onTodayClick", "onClearClick", "onMonthChange", "onYearChange", "onClickOutside", "onShow"] }], directives: [{ type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "date": i2.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: DatetimesControlComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-datetimes-control', template: "<div class=\"group-dates\" [ngClass]=\" element.columnValue ? 'valid' : 'invalid' \">\n    <label class=\"text-nowrap label-text\">{{element.columnLabel}} <span style=\"color:red\"\n            *ngIf=\"element.isRequire\">*</span></label>\n\n    <p-calendar panelStyleClass=\"datepicker-default\" placeholder=\"DD/MM/YYYY\" [appendTo]=\"'body'\" [baseZIndex]=\"101\"\n        [disabled]=\"element.isDisable\" inputId=\"multiple\" [(ngModel)]=\"element.columnValue\" selectionMode=\"multiple\"\n        [readonlyInput]=\"true\" [monthNavigator]=\"true\" [yearNavigator]=\"true\"\n        (onBlur)=\"onChangeValue($event, element.field_name, element)\"\n        (onClose)=\"onChangeValue($event, element.field_name, element)\"\n        (onSelect)=\"onChangeValue($event, element.field_name, element)\" yearRange=\"1900:2025\"\n        [required]=\"element.isRequire && element.isVisiable && !element.isEmpty\" dateFormat=\"dd/mm/yy\"\n        name={{element.field_name}}></p-calendar>\n    <div class=\"list-date\">\n        <div *ngFor=\"let item of element.columnValue\">\n            <span>{{item | date: 'dd/MM/yyyy'}}</span>\n        </div>\n    </div>\n\n    <div *ngIf=\"modelFields[element.field_name]?.isRequire && submit && modelFields[element.field_name]?.error\"\n        class=\"alert-validation alert-danger\">\n        <div [hidden]=\"!modelFields[element.field_name]?.error\">\n            {{modelFields[element.field_name]?.message}}\n        </div>\n    </div>\n</div>", styles: [""] }]
        }], ctorParameters: function () { return []; }, propDecorators: { element: [{
                type: Input
            }], modelFields: [{
                type: Input
            }], dataView: [{
                type: Input
            }], detail: [{
                type: Input
            }], submit: [{
                type: Input
            }], callbackDatetimes: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXRpbWVzLWNvbnRyb2wuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdW5pLWNvbnRyb2wvc3JjL2xpYi9kYXRldGltZXMtY29udHJvbC9kYXRldGltZXMtY29udHJvbC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91bmktY29udHJvbC9zcmMvbGliL2RhdGV0aW1lcy1jb250cm9sL2RhdGV0aW1lcy1jb250cm9sLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7O0FBTS9FLE1BQU0sT0FBTyx5QkFBeUI7SUFPcEM7UUFGUyxXQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ2Qsc0JBQWlCLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUV0RCxlQUFVLEdBQUcsS0FBSyxDQUFDO0lBREgsQ0FBQztJQUVqQixRQUFRO0lBQ1IsQ0FBQztJQUVELGFBQWEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU87UUFDdEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxTQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDeEgsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUE7UUFDekcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQztZQUMxQixLQUFLLEVBQUUsT0FBTztZQUNkLEtBQUssRUFBRSxLQUFLO1lBQ1osS0FBSyxFQUFFLFVBQVU7U0FDbEIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUFLO1FBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFO1lBQzdCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQztJQUVELGFBQWEsQ0FBQyxLQUFLO1FBQ2pCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUU7WUFDNUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7U0FDeEI7YUFBTTtZQUNMLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQzs7c0hBbENVLHlCQUF5QjswR0FBekIseUJBQXlCLHdPQ050Qyw4OENBd0JNOzJGRGxCTyx5QkFBeUI7a0JBTHJDLFNBQVM7K0JBQ0UsdUJBQXVCOzBFQUt4QixPQUFPO3NCQUFmLEtBQUs7Z0JBQ0csV0FBVztzQkFBbkIsS0FBSztnQkFDRyxRQUFRO3NCQUFoQixLQUFLO2dCQUNHLE1BQU07c0JBQWQsS0FBSztnQkFDRyxNQUFNO3NCQUFkLEtBQUs7Z0JBQ0ksaUJBQWlCO3NCQUExQixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbGliLWRhdGV0aW1lcy1jb250cm9sJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2RhdGV0aW1lcy1jb250cm9sLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vZGF0ZXRpbWVzLWNvbnRyb2wuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIERhdGV0aW1lc0NvbnRyb2xDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKSBlbGVtZW50O1xuICBASW5wdXQoKSBtb2RlbEZpZWxkcztcbiAgQElucHV0KCkgZGF0YVZpZXc7XG4gIEBJbnB1dCgpIGRldGFpbDtcbiAgQElucHV0KCkgc3VibWl0ID0gZmFsc2U7XG4gIEBPdXRwdXQoKSBjYWxsYmFja0RhdGV0aW1lcyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBjb25zdHJ1Y3RvcigpIHsgfVxuICBjbGFzc0lucHV0ID0gZmFsc2U7XG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICB9XG5cbiAgb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgZmllbGRfbmFtZSwgZWxlbWVudCkge1xuICAgIHRoaXMubW9kZWxGaWVsZHNbZmllbGRfbmFtZV0uZXJyb3IgPSB0aGlzLm1vZGVsRmllbGRzW2ZpZWxkX25hbWVdLmlzUmVxdWlyZSAmJiAhdGhpcy5lbGVtZW50LmNvbHVtblZhbHVlID8gdHJ1ZSA6IGZhbHNlO1xuICAgIHRoaXMubW9kZWxGaWVsZHNbZmllbGRfbmFtZV0ubWVzc2FnZSA9IHRoaXMubW9kZWxGaWVsZHNbZmllbGRfbmFtZV0uZXJyb3IgPyAnVHLGsOG7nW5nIGLhuq90IGJ14buZYyBuaOG6rXAgIScgOiAnJ1xuICAgIHRoaXMuY2FsbGJhY2tEYXRldGltZXMuZW1pdCh7XG4gICAgICBldmVudDogZWxlbWVudCxcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGZpZWxkOiBmaWVsZF9uYW1lXG4gICAgfSlcbiAgfVxuXG4gIGlucHV0Rm9jdXMoZXZlbnQpIHtcbiAgICBpZiAoIXRoaXMuZWxlbWVudC5jb2x1bW5WYWx1ZSkge1xuICAgICAgdGhpcy5jbGFzc0lucHV0ID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpbnB1dEZvY3VzT3V0KGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuZWxlbWVudC5jb2x1bW5WYWx1ZSkge1xuICAgICAgdGhpcy5jbGFzc0lucHV0ID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jbGFzc0lucHV0ID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbn1cbiIsIjxkaXYgY2xhc3M9XCJncm91cC1kYXRlc1wiIFtuZ0NsYXNzXT1cIiBlbGVtZW50LmNvbHVtblZhbHVlID8gJ3ZhbGlkJyA6ICdpbnZhbGlkJyBcIj5cbiAgICA8bGFiZWwgY2xhc3M9XCJ0ZXh0LW5vd3JhcCBsYWJlbC10ZXh0XCI+e3tlbGVtZW50LmNvbHVtbkxhYmVsfX0gPHNwYW4gc3R5bGU9XCJjb2xvcjpyZWRcIlxuICAgICAgICAgICAgKm5nSWY9XCJlbGVtZW50LmlzUmVxdWlyZVwiPio8L3NwYW4+PC9sYWJlbD5cblxuICAgIDxwLWNhbGVuZGFyIHBhbmVsU3R5bGVDbGFzcz1cImRhdGVwaWNrZXItZGVmYXVsdFwiIHBsYWNlaG9sZGVyPVwiREQvTU0vWVlZWVwiIFthcHBlbmRUb109XCInYm9keSdcIiBbYmFzZVpJbmRleF09XCIxMDFcIlxuICAgICAgICBbZGlzYWJsZWRdPVwiZWxlbWVudC5pc0Rpc2FibGVcIiBpbnB1dElkPVwibXVsdGlwbGVcIiBbKG5nTW9kZWwpXT1cImVsZW1lbnQuY29sdW1uVmFsdWVcIiBzZWxlY3Rpb25Nb2RlPVwibXVsdGlwbGVcIlxuICAgICAgICBbcmVhZG9ubHlJbnB1dF09XCJ0cnVlXCIgW21vbnRoTmF2aWdhdG9yXT1cInRydWVcIiBbeWVhck5hdmlnYXRvcl09XCJ0cnVlXCJcbiAgICAgICAgKG9uQmx1cik9XCJvbkNoYW5nZVZhbHVlKCRldmVudCwgZWxlbWVudC5maWVsZF9uYW1lLCBlbGVtZW50KVwiXG4gICAgICAgIChvbkNsb3NlKT1cIm9uQ2hhbmdlVmFsdWUoJGV2ZW50LCBlbGVtZW50LmZpZWxkX25hbWUsIGVsZW1lbnQpXCJcbiAgICAgICAgKG9uU2VsZWN0KT1cIm9uQ2hhbmdlVmFsdWUoJGV2ZW50LCBlbGVtZW50LmZpZWxkX25hbWUsIGVsZW1lbnQpXCIgeWVhclJhbmdlPVwiMTkwMDoyMDI1XCJcbiAgICAgICAgW3JlcXVpcmVkXT1cImVsZW1lbnQuaXNSZXF1aXJlICYmIGVsZW1lbnQuaXNWaXNpYWJsZSAmJiAhZWxlbWVudC5pc0VtcHR5XCIgZGF0ZUZvcm1hdD1cImRkL21tL3l5XCJcbiAgICAgICAgbmFtZT17e2VsZW1lbnQuZmllbGRfbmFtZX19PjwvcC1jYWxlbmRhcj5cbiAgICA8ZGl2IGNsYXNzPVwibGlzdC1kYXRlXCI+XG4gICAgICAgIDxkaXYgKm5nRm9yPVwibGV0IGl0ZW0gb2YgZWxlbWVudC5jb2x1bW5WYWx1ZVwiPlxuICAgICAgICAgICAgPHNwYW4+e3tpdGVtIHwgZGF0ZTogJ2RkL01NL3l5eXknfX08L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiAqbmdJZj1cIm1vZGVsRmllbGRzW2VsZW1lbnQuZmllbGRfbmFtZV0/LmlzUmVxdWlyZSAmJiBzdWJtaXQgJiYgbW9kZWxGaWVsZHNbZWxlbWVudC5maWVsZF9uYW1lXT8uZXJyb3JcIlxuICAgICAgICBjbGFzcz1cImFsZXJ0LXZhbGlkYXRpb24gYWxlcnQtZGFuZ2VyXCI+XG4gICAgICAgIDxkaXYgW2hpZGRlbl09XCIhbW9kZWxGaWVsZHNbZWxlbWVudC5maWVsZF9uYW1lXT8uZXJyb3JcIj5cbiAgICAgICAgICAgIHt7bW9kZWxGaWVsZHNbZWxlbWVudC5maWVsZF9uYW1lXT8ubWVzc2FnZX19XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC9kaXY+Il19