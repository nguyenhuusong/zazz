import { Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "primeng/calendar";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
export class DatetimeControlComponent {
    constructor() {
        this.submit = false;
        this.callbackDatetime = new EventEmitter();
        this.classInput = false;
    }
    ngOnInit() {
    }
    onChangeValue(value, field_name, element) {
        this.modelFields[field_name].error = this.modelFields[field_name].isRequire && !this.element.columnValue ? true : false;
        this.modelFields[field_name].message = this.modelFields[field_name].error ? 'Trường bắt buộc nhập !' : '';
        this.callbackDatetime.emit({
            event: element,
            value: value,
            field: field_name
        });
    }
    inputFocus(event) {
        if (!this.element.columnValue) {
            this.classInput = true;
        }
    }
    inputFocusOut(event) {
        if (this.element.columnValue) {
            this.classInput = true;
        }
        else {
            this.classInput = false;
        }
    }
}
DatetimeControlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: DatetimeControlComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DatetimeControlComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.0", type: DatetimeControlComponent, selector: "lib-datetime-control", inputs: { element: "element", modelFields: "modelFields", dataView: "dataView", detail: "detail", submit: "submit" }, outputs: { callbackDatetime: "callbackDatetime" }, ngImport: i0, template: "<div class=\"group-date\" [ngClass]=\" element.columnValue ? 'valid' : 'invalid' \">\n    <label class=\"text-nowrap label-text\" >{{element.columnLabel}} <span style=\"color:red\" *ngIf=\"element.isRequire\">*</span></label>\n\n    <p-calendar panelStyleClass=\"datepicker-default\" placeholder=\"DD/MM/YYYY\" [appendTo]=\"'body'\" [baseZIndex]=\"101\" [disabled]=\"element.isDisable\"\n    [(ngModel)]=\"element.columnValue\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" (onBlur)=\"onChangeValue($event, element.field_name, element)\" (onSelect)=\"onChangeValue($event, element.field_name, element)\"\n    yearRange=\"1900:2025\" inputId=\"navigators\" [required]=\"element.isRequire && element.isVisiable && !element.isEmpty\"\n    dateFormat=\"dd/mm/yy\" name={{element.field_name}}></p-calendar>\n\n    <div *ngIf=\"modelFields[element.field_name]?.isRequire && submit && modelFields[element.field_name]?.error\"\n          class=\"alert-validation alert-danger\">\n          <div [hidden]=\"!modelFields[element.field_name]?.error\">\n          {{modelFields[element.field_name]?.message}}\n          </div>\n   </div>\n</div>", styles: [""], components: [{ type: i1.Calendar, selector: "p-calendar", inputs: ["style", "styleClass", "inputStyle", "inputId", "name", "inputStyleClass", "placeholder", "ariaLabelledBy", "iconAriaLabel", "disabled", "dateFormat", "multipleSeparator", "rangeSeparator", "inline", "showOtherMonths", "selectOtherMonths", "showIcon", "icon", "appendTo", "readonlyInput", "shortYearCutoff", "monthNavigator", "yearNavigator", "hourFormat", "timeOnly", "stepHour", "stepMinute", "stepSecond", "showSeconds", "required", "showOnFocus", "showWeek", "dataType", "selectionMode", "maxDateCount", "showButtonBar", "todayButtonStyleClass", "clearButtonStyleClass", "autoZIndex", "baseZIndex", "panelStyleClass", "panelStyle", "keepInvalid", "hideOnDateTimeSelect", "numberOfMonths", "view", "touchUI", "timeSeparator", "focusTrap", "firstDayOfWeek", "showTransitionOptions", "hideTransitionOptions", "tabindex", "defaultDate", "minDate", "maxDate", "disabledDates", "disabledDays", "yearRange", "showTime", "locale"], outputs: ["onFocus", "onBlur", "onClose", "onSelect", "onInput", "onTodayClick", "onClearClick", "onMonthChange", "onYearChange", "onClickOutside", "onShow"] }], directives: [{ type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: DatetimeControlComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-datetime-control', template: "<div class=\"group-date\" [ngClass]=\" element.columnValue ? 'valid' : 'invalid' \">\n    <label class=\"text-nowrap label-text\" >{{element.columnLabel}} <span style=\"color:red\" *ngIf=\"element.isRequire\">*</span></label>\n\n    <p-calendar panelStyleClass=\"datepicker-default\" placeholder=\"DD/MM/YYYY\" [appendTo]=\"'body'\" [baseZIndex]=\"101\" [disabled]=\"element.isDisable\"\n    [(ngModel)]=\"element.columnValue\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" (onBlur)=\"onChangeValue($event, element.field_name, element)\" (onSelect)=\"onChangeValue($event, element.field_name, element)\"\n    yearRange=\"1900:2025\" inputId=\"navigators\" [required]=\"element.isRequire && element.isVisiable && !element.isEmpty\"\n    dateFormat=\"dd/mm/yy\" name={{element.field_name}}></p-calendar>\n\n    <div *ngIf=\"modelFields[element.field_name]?.isRequire && submit && modelFields[element.field_name]?.error\"\n          class=\"alert-validation alert-danger\">\n          <div [hidden]=\"!modelFields[element.field_name]?.error\">\n          {{modelFields[element.field_name]?.message}}\n          </div>\n   </div>\n</div>", styles: [""] }]
        }], ctorParameters: function () { return []; }, propDecorators: { element: [{
                type: Input
            }], modelFields: [{
                type: Input
            }], dataView: [{
                type: Input
            }], detail: [{
                type: Input
            }], submit: [{
                type: Input
            }], callbackDatetime: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXRpbWUtY29udHJvbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91bmktY29udHJvbC9zcmMvbGliL2RhdGV0aW1lLWNvbnRyb2wvZGF0ZXRpbWUtY29udHJvbC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91bmktY29udHJvbC9zcmMvbGliL2RhdGV0aW1lLWNvbnRyb2wvZGF0ZXRpbWUtY29udHJvbC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7OztBQU8vRSxNQUFNLE9BQU8sd0JBQXdCO0lBT25DO1FBRlMsV0FBTSxHQUFHLEtBQUssQ0FBQztRQUNkLHFCQUFnQixHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFFckQsZUFBVSxHQUFHLEtBQUssQ0FBQztJQURILENBQUM7SUFFakIsUUFBUTtJQUNSLENBQUM7SUFFRCxhQUFhLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxPQUFPO1FBQ3RDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3hILElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO1FBQ3pHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7WUFDekIsS0FBSyxFQUFFLE9BQU87WUFDZCxLQUFLLEVBQUUsS0FBSztZQUNaLEtBQUssRUFBRSxVQUFVO1NBQ2xCLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFRCxVQUFVLENBQUMsS0FBSztRQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRTtZQUM3QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztTQUN4QjtJQUNILENBQUM7SUFFRCxhQUFhLENBQUMsS0FBSztRQUNqQixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFO1lBQzVCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1NBQ3hCO2FBQU07WUFDTCxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztTQUN6QjtJQUNILENBQUM7O3FIQWxDVSx3QkFBd0I7eUdBQXhCLHdCQUF3QixxT0NSckMsb25DQWNNOzJGRE5PLHdCQUF3QjtrQkFMcEMsU0FBUzsrQkFDRSxzQkFBc0I7MEVBS3ZCLE9BQU87c0JBQWYsS0FBSztnQkFDRyxXQUFXO3NCQUFuQixLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csTUFBTTtzQkFBZCxLQUFLO2dCQUNHLE1BQU07c0JBQWQsS0FBSztnQkFDSSxnQkFBZ0I7c0JBQXpCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbGliLWRhdGV0aW1lLWNvbnRyb2wnLFxuICB0ZW1wbGF0ZVVybDogJy4vZGF0ZXRpbWUtY29udHJvbC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2RhdGV0aW1lLWNvbnRyb2wuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIERhdGV0aW1lQ29udHJvbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGVsZW1lbnQ7XG4gIEBJbnB1dCgpIG1vZGVsRmllbGRzO1xuICBASW5wdXQoKSBkYXRhVmlldztcbiAgQElucHV0KCkgZGV0YWlsO1xuICBASW5wdXQoKSBzdWJtaXQgPSBmYWxzZTtcbiAgQE91dHB1dCgpIGNhbGxiYWNrRGF0ZXRpbWUgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgY29uc3RydWN0b3IoKSB7IH1cbiAgY2xhc3NJbnB1dCA9IGZhbHNlO1xuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgfVxuXG4gIG9uQ2hhbmdlVmFsdWUodmFsdWUsIGZpZWxkX25hbWUsIGVsZW1lbnQpIHtcbiAgICB0aGlzLm1vZGVsRmllbGRzW2ZpZWxkX25hbWVdLmVycm9yID0gdGhpcy5tb2RlbEZpZWxkc1tmaWVsZF9uYW1lXS5pc1JlcXVpcmUgJiYgIXRoaXMuZWxlbWVudC5jb2x1bW5WYWx1ZSA/IHRydWUgOiBmYWxzZTtcbiAgICB0aGlzLm1vZGVsRmllbGRzW2ZpZWxkX25hbWVdLm1lc3NhZ2UgPSB0aGlzLm1vZGVsRmllbGRzW2ZpZWxkX25hbWVdLmVycm9yID8gJ1RyxrDhu51uZyBi4bqvdCBideG7mWMgbmjhuq1wICEnIDogJydcbiAgICB0aGlzLmNhbGxiYWNrRGF0ZXRpbWUuZW1pdCh7XG4gICAgICBldmVudDogZWxlbWVudCxcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGZpZWxkOiBmaWVsZF9uYW1lXG4gICAgfSlcbiAgfVxuXG4gIGlucHV0Rm9jdXMoZXZlbnQpIHtcbiAgICBpZiAoIXRoaXMuZWxlbWVudC5jb2x1bW5WYWx1ZSkge1xuICAgICAgdGhpcy5jbGFzc0lucHV0ID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpbnB1dEZvY3VzT3V0KGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuZWxlbWVudC5jb2x1bW5WYWx1ZSkge1xuICAgICAgdGhpcy5jbGFzc0lucHV0ID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jbGFzc0lucHV0ID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbn1cbiIsIjxkaXYgY2xhc3M9XCJncm91cC1kYXRlXCIgW25nQ2xhc3NdPVwiIGVsZW1lbnQuY29sdW1uVmFsdWUgPyAndmFsaWQnIDogJ2ludmFsaWQnIFwiPlxuICAgIDxsYWJlbCBjbGFzcz1cInRleHQtbm93cmFwIGxhYmVsLXRleHRcIiA+e3tlbGVtZW50LmNvbHVtbkxhYmVsfX0gPHNwYW4gc3R5bGU9XCJjb2xvcjpyZWRcIiAqbmdJZj1cImVsZW1lbnQuaXNSZXF1aXJlXCI+Kjwvc3Bhbj48L2xhYmVsPlxuXG4gICAgPHAtY2FsZW5kYXIgcGFuZWxTdHlsZUNsYXNzPVwiZGF0ZXBpY2tlci1kZWZhdWx0XCIgcGxhY2Vob2xkZXI9XCJERC9NTS9ZWVlZXCIgW2FwcGVuZFRvXT1cIidib2R5J1wiIFtiYXNlWkluZGV4XT1cIjEwMVwiIFtkaXNhYmxlZF09XCJlbGVtZW50LmlzRGlzYWJsZVwiXG4gICAgWyhuZ01vZGVsKV09XCJlbGVtZW50LmNvbHVtblZhbHVlXCIgW21vbnRoTmF2aWdhdG9yXT1cInRydWVcIiBbeWVhck5hdmlnYXRvcl09XCJ0cnVlXCIgKG9uQmx1cik9XCJvbkNoYW5nZVZhbHVlKCRldmVudCwgZWxlbWVudC5maWVsZF9uYW1lLCBlbGVtZW50KVwiIChvblNlbGVjdCk9XCJvbkNoYW5nZVZhbHVlKCRldmVudCwgZWxlbWVudC5maWVsZF9uYW1lLCBlbGVtZW50KVwiXG4gICAgeWVhclJhbmdlPVwiMTkwMDoyMDI1XCIgaW5wdXRJZD1cIm5hdmlnYXRvcnNcIiBbcmVxdWlyZWRdPVwiZWxlbWVudC5pc1JlcXVpcmUgJiYgZWxlbWVudC5pc1Zpc2lhYmxlICYmICFlbGVtZW50LmlzRW1wdHlcIlxuICAgIGRhdGVGb3JtYXQ9XCJkZC9tbS95eVwiIG5hbWU9e3tlbGVtZW50LmZpZWxkX25hbWV9fT48L3AtY2FsZW5kYXI+XG5cbiAgICA8ZGl2ICpuZ0lmPVwibW9kZWxGaWVsZHNbZWxlbWVudC5maWVsZF9uYW1lXT8uaXNSZXF1aXJlICYmIHN1Ym1pdCAmJiBtb2RlbEZpZWxkc1tlbGVtZW50LmZpZWxkX25hbWVdPy5lcnJvclwiXG4gICAgICAgICAgY2xhc3M9XCJhbGVydC12YWxpZGF0aW9uIGFsZXJ0LWRhbmdlclwiPlxuICAgICAgICAgIDxkaXYgW2hpZGRlbl09XCIhbW9kZWxGaWVsZHNbZWxlbWVudC5maWVsZF9uYW1lXT8uZXJyb3JcIj5cbiAgICAgICAgICB7e21vZGVsRmllbGRzW2VsZW1lbnQuZmllbGRfbmFtZV0/Lm1lc3NhZ2V9fVxuICAgICAgICAgIDwvZGl2PlxuICAgPC9kaXY+XG48L2Rpdj4iXX0=